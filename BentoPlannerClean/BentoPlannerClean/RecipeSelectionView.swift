import SwiftUI

struct RecipeSelectionView: View {
    @EnvironmentObject var bentoStore: BentoStore
    @Environment(\.dismiss) var dismiss
    let selectedDay: String
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    // „Éò„ÉÉ„ÉÄ„Éº„Çª„ÇØ„Ç∑„Éß„É≥
                    headerSection
                    
                    // „ÅäÊ∞ó„Å´ÂÖ•„Çä„É¨„Ç∑„Éî„Çª„ÇØ„Ç∑„Éß„É≥ÔºàÂÑ™ÂÖàË°®Á§∫Ôºâ
                    if !bentoStore.favoriteRecipes.isEmpty {
                        favoriteRecipesSection
                    }
                    
                    // „Ç´„ÉÜ„Ç¥„É™Âà•„É¨„Ç∑„Éî
                    ForEach(BentoCategory.allCases) { category in
                        categorySection(category)
                    }
                    
                    // È£üÊùê„Éô„Éº„Çπ„É¨„Ç∑„Éî
                    if !bentoStore.ingredientBasedRecipes.isEmpty {
                        ingredientBasedSection
                    }
                    
                    Spacer(minLength: 50)
                }
                .padding()
            }
            .navigationTitle("\(selectedDay)ÊõúÊó•„ÅÆ„É¨„Ç∑„ÉîÈÅ∏Êäû")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("„Ç≠„É£„É≥„Çª„É´") {
                        dismiss()
                    }
                }
            }
        }
    }
    
    var headerSection: some View {
        VStack(spacing: 16) {
            Image(systemName: "list.bullet.rectangle")
                .font(.system(size: 60))
                .foregroundColor(.orange)
            
            VStack(spacing: 8) {
                Text("\(selectedDay)ÊõúÊó•„ÅÆ„É¨„Ç∑„Éî„ÇíÈÅ∏Êäû")
                    .font(.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(.primary)
                
                Text("„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆ„É¨„Ç∑„Éî„ÇíÈÄ±Èñì„Éó„É©„É≥„Å´ËøΩÂä†„Åó„Åæ„Åó„Çá„ÅÜ")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
            }
        }
        .padding(.top)
    }
    
    func categorySection(_ category: BentoCategory) -> some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text(category.emoji)
                    .font(.title2)
                
                Text(category.rawValue)
                    .font(.headline)
                    .fontWeight(.bold)
                
                Spacer()
            }
            
            let categoryRecipes = getAllRecipesForCategory(category)
            
            if categoryRecipes.isEmpty {
                EmptyRecipeCard(category: category)
            } else {
                LazyVStack(spacing: 12) {
                    ForEach(categoryRecipes) { recipe in
                        SelectableRecipeCard(recipe: recipe) {
                            bentoStore.addRecipeToWeeklyPlan(recipe, day: selectedDay)
                            dismiss()
                        }
                    }
                }
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(category.color.opacity(0.05))
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(category.color.opacity(0.2), lineWidth: 1)
                )
        )
    }
    
    var favoriteRecipesSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("‚ù§Ô∏è")
                    .font(.title2)
                
                Text("„ÅäÊ∞ó„Å´ÂÖ•„Çä„É¨„Ç∑„Éî")
                    .font(.headline)
                    .fontWeight(.bold)
                
                Spacer()
            }
            
            LazyVStack(spacing: 12) {
                ForEach(bentoStore.favoriteRecipes) { recipe in
                    SelectableRecipeCard(recipe: recipe) {
                        bentoStore.addRecipeToWeeklyPlan(recipe, day: selectedDay)
                        dismiss()
                    }
                }
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(Color.red.opacity(0.05))
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(Color.red.opacity(0.2), lineWidth: 1)
                )
        )
    }
    
    var ingredientBasedSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("üç±")
                    .font(.title2)
                
                Text("È£üÊùê„Åã„Çâ‰Ωú„Å£„Åü„É¨„Ç∑„Éî")
                    .font(.headline)
                    .fontWeight(.bold)
                
                Spacer()
            }
            
            LazyVStack(spacing: 12) {
                ForEach(bentoStore.ingredientBasedRecipes) { recipe in
                    SelectableRecipeCard(recipe: recipe) {
                        bentoStore.addRecipeToWeeklyPlan(recipe, day: selectedDay)
                        dismiss()
                    }
                }
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(Color.pink.opacity(0.05))
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(Color.pink.opacity(0.2), lineWidth: 1)
                )
        )
    }
    
    private func getAllRecipesForCategory(_ category: BentoCategory) -> [BentoRecipe] {
        var allRecipes: [BentoRecipe] = []
        
        // „É°„Ç§„É≥„É¨„Ç∑„Éî„Åã„ÇâË©≤ÂΩì„Ç´„ÉÜ„Ç¥„É™„ÇíÂèñÂæó
        allRecipes.append(contentsOf: bentoStore.recipes.filter { $0.category == category })
        
        // AIÁîüÊàê„É¨„Ç∑„Éî„Åã„ÇâË©≤ÂΩì„Ç´„ÉÜ„Ç¥„É™„ÇíÂèñÂæó
        if let aiRecipes = bentoStore.aiGeneratedRecipes[category] {
            allRecipes.append(contentsOf: aiRecipes)
        }
        
        // „ÅäÊ∞ó„Å´ÂÖ•„Çä„É¨„Ç∑„Éî„Åã„ÇâË©≤ÂΩì„Ç´„ÉÜ„Ç¥„É™„ÇíÂèñÂæó
        allRecipes.append(contentsOf: bentoStore.favoriteRecipes.filter { $0.category == category })
        
        // ÈáçË§á„ÇíÈô§Âéª
        return Array(Set(allRecipes.map { $0.id })).compactMap { id in
            allRecipes.first { $0.id == id }
        }
    }
}

struct SelectableRecipeCard: View {
    let recipe: BentoRecipe
    let onSelect: () -> Void
    
    var body: some View {
        Button(action: onSelect) {
            HStack(spacing: 16) {
                // „É¨„Ç∑„ÉîÊÉÖÂ†±
                VStack(alignment: .leading, spacing: 4) {
                    Text(recipe.name)
                        .font(.subheadline)
                        .fontWeight(.semibold)
                        .foregroundColor(.primary)
                        .lineLimit(2)
                    
                    Text(recipe.description)
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .lineLimit(2)
                    
                    HStack(spacing: 12) {
                        Label("\(recipe.prepTime)ÂàÜ", systemImage: "clock")
                            .font(.caption2)
                            .foregroundColor(.secondary)
                        
                        Label("\(recipe.calories)kcal", systemImage: "flame")
                            .font(.caption2)
                            .foregroundColor(.secondary)
                        
                        Label(recipe.difficulty.rawValue, systemImage: "star")
                            .font(.caption2)
                            .foregroundColor(.secondary)
                    }
                }
                
                Spacer()
                
                // ÈÅ∏Êäû„Éú„Çø„É≥
                Image(systemName: "plus.circle.fill")
                    .font(.title2)
                    .foregroundColor(.blue)
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color.white)
                    .shadow(color: .gray.opacity(0.2), radius: 4, x: 0, y: 2)
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
}

struct EmptyRecipeCard: View {
    let category: BentoCategory
    
    var body: some View {
        VStack(spacing: 12) {
            Image(systemName: "rectangle.dashed")
                .font(.title2)
                .foregroundColor(.gray)
            
            Text("„Åæ„Å†„É¨„Ç∑„Éî„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
                .font(.subheadline)
                .foregroundColor(.gray)
            
            Text("„Äå\(category.rawValue)„Äç„Ç´„ÉÜ„Ç¥„É™„Åß„É¨„Ç∑„Éî„ÇíÁîüÊàê„Åó„Å¶„Åã„ÇâËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
        }
        .frame(maxWidth: .infinity)
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .stroke(Color.gray.opacity(0.3), style: StrokeStyle(lineWidth: 1, dash: [5]))
        )
    }
}

#Preview {
    RecipeSelectionView(selectedDay: "Êúà")
        .environmentObject(BentoStore())
}